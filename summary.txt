Permutation and Combination
SegmentTree
FenwickTree(Binary Indexed Tree)
Trie
Disjoint
Topological Sort
Line Sweep

private class FenwickTree {

	private int[] tree;
	private int len;

	public FenwickTree(int n) {
		this.len = n;
		tree = new int[n + 1];
	}
	
	/*
	 void update(vector<int> &v, int i, const int d) {
        for (; i < v.size(); v[i] += d, i += (i & -i));
    }
    
    int presum(const vector<int> &v, int i) {
        int r = 0;
        for (; i; r += v[i], i -= (i & -i));
        return r;
    }
	*/
	//更新本节点和父节点
	public void update(int i, int delta) {
		while (i <= this.len) {
			tree[i] += delta;
			i += lowbit(i);
		}
	}
	//求和，找到对应树的节点
	public int query(int i) {
		int sum = 0;
		while (i > 0) {
			sum += tree[i];
			i -= lowbit(i);
		}
		return sum;
	}
	//计算第一个非0的位置，2的幂
	public int lowbit(int x) {
		return x & (-x);
	}
}

FenwickTree fenwickTree = new FenwickTree(len);



// Author: Huahua, running time: 24 ms
class SegmentTreeNode {
public:
  SegmentTreeNode(int start, int end, int sum,
                  SegmentTreeNode* left = nullptr,
                  SegmentTreeNode* right = nullptr): 
    start(start),
    end(end),
    sum(sum),
    left(left),
    right(right){}      
  SegmentTreeNode(const SegmentTreeNode&) = delete;
  SegmentTreeNode& operator=(const SegmentTreeNode&) = delete;
  ~SegmentTreeNode() {
    delete left;
    delete right;
    left = right = nullptr;
  }
  
  int start;
  int end;
  int sum;
  SegmentTreeNode* left;
  SegmentTreeNode* right;
};
 
class NumArray {
public:
  NumArray(vector<int> nums) {
    nums_.swap(nums);
    if (!nums_.empty())
      root_.reset(buildTree(0, nums_.size() - 1));
  }
 
  void update(int i, int val) {
    updateTree(root_.get(), i, val);
  }
 
  int sumRange(int i, int j) {
    return sumRange(root_.get(), i, j);
  }
private:
  vector<int> nums_;
  std::unique_ptr<SegmentTreeNode> root_;
  
  SegmentTreeNode* buildTree(int start, int end) {  
    if (start == end) {      
      return new SegmentTreeNode(start, end, nums_[start]);
    }
    int mid = start + (end - start) / 2;
    auto left = buildTree(start, mid);
    auto right = buildTree(mid + 1, end);
    auto node = new SegmentTreeNode(start, end, left->sum + right->sum, left, right);    
    return node;
  }
  
  void updateTree(SegmentTreeNode* root, int i, int val) {
    if (root->start == i && root->end == i) {
      root->sum = val;
      return;
    }
    int mid = root->start + (root->end - root->start) / 2;
    if (i <= mid) {
      updateTree(root->left, i, val);
    } else {      
      updateTree(root->right, i, val);
    }
    root->sum = root->left->sum + root->right->sum;
  }
  
  int sumRange(SegmentTreeNode* root, int i, int j) {    
    if (i == root->start && j == root->end) {
      return root->sum;
    }
    int mid = root->start + (root->end - root->start) / 2;
    if (j <= mid) {
      return sumRange(root->left, i, j);
    } else if (i > mid) {
      return sumRange(root->right, i, j);
    } else {
      return sumRange(root->left, i, mid) + sumRange(root->right, mid + 1, j);
    }
  }
};



class UnionFindSet{
public:
    UnionFindSet(int n){
        parents.resize(n+1);
        weights.resize(n+1);
        for(int i=0;i<=n;i++){
            parents[i]=i;
            weights[i]=1;
        }
    }
    int Find(int u){
        while(u!=parents[u]){
            parents[u]==parents[parents[u]];
            u = parents[u];
        }
        return u;
    }
    bool isSameSet(int u,int v){
        return Find(u)==Find(v);
    }
    void Union(int u,int v){
        int pu = Find(u);
        int pv = Find(v);
        if(pv==pu)return;
        
        if(weights[pu]>weights[pv]){
            parents[pv] = pu;
            weights[pu]+=weights[pv];
        }else{
            parents[pu] = pv;
            weights[pv]+=weights[pu];
        }
    }
    
    
private:
    vector<int> parents;
    vector<int> weights;
    
};


